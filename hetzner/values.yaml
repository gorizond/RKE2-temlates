cluster:
  name: hetzner
  labels: {}
  annotations: {}

cloudCredentialSecretName: ""

kubernetesVersion: v1.26.10+rke2r2
machineGlobalConfig:
  cni: cilium

registries:
  mirrors:
    docker.io:
      endpoint:
      - https://mirror.gcr.io

hetzner:
  userDataFromFile: true
  image: ubuntu-22.04

nodepools:
  - name: brain
    quantity: 1
    etcd: true
    controlplane: true
    serverLocation: fsn1
    serverType: cpx21
  - name: loadbalancer
    quantity: 1
    worker: true
    serverLocation: fsn1
    serverType: cpx11
    rkeLabels: '{"nodepool":"loadbalancer"}'
    labels:
      nodepool: loadbalancer
    taints:
      - effect: NoSchedule
        key: loadbalancer
        value: service
  - name: worker
    autoscale: true
    worker: true
    quantity: 1
    serverLocation: fsn1
    serverType: cpx31
    rkeLabels: '{"nodepool":"worker"}'
additionalManifest: |-
  apiVersion: helm.cattle.io/v1
  kind: HelmChartConfig
  metadata:
    name: rke2-ingress-nginx
    namespace: kube-system
  spec:
    valuesContent: |-
      controller:
        nodeSelector: 
          nodepool: loadbalancer
        tolerations:
        - effect: NoSchedule
          key: loadbalancer
          operator: Equal
          value: service
  ---
    apiVersion: v1
    kind: Secret
    metadata:
      name: hcloud
      namespace: kube-system
    data: 
      token: REPLACE_TOKEN_TO_CLOUD_CREDENTIAL_BTOA
  ---
  apiVersion: helm.cattle.io/v1
  kind: HelmChart
  metadata:
    name: hcloud-cloud-controller-manager
    namespace: kube-system
  spec:
    bootstrap: true
    repo: https://charts.hetzner.cloud
    chart: hcloud-cloud-controller-manager
    targetNamespace: kube-system
    valuesContent: |-
      additionalTolerations:      
        - key: "node-role.kubernetes.io/etcd"
          effect: NoExecute
  ---
  apiVersion: helm.cattle.io/v1
  kind: HelmChart
  metadata:
    name: hcloud-csi
    namespace: kube-system
  spec:
    repo: https://charts.hetzner.cloud
    chart: hcloud-csi
    targetNamespace: kube-system

upgradeStrategy:
  controlPlaneConcurrency: "1"
  controlPlaneDrainOptions:
    deleteEmptyDirData: true
    disableEviction: false
    enabled: true
    force: false
    gracePeriod: -1
    ignoreDaemonSets: true
    ignoreErrors: false
    skipWaitForDeleteTimeoutSeconds: 0
    timeout: 120
  workerConcurrency: "1"
  workerDrainOptions:
    deleteEmptyDirData: true
    disableEviction: false
    enabled: true
    force: false
    gracePeriod: -1
    ignoreDaemonSets: true
    ignoreErrors: false
    skipWaitForDeleteTimeoutSeconds: 0
    timeout: 120

etcd:
  disableSnapshots: false
  s3: null
  snapshotRetention: 12
  snapshotScheduleCron: 0 */4 * * *
